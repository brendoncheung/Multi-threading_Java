public class PriortyDemo {

    /**
     * Every thread has a priority, it can be default priority generated by JVM
     * or custom priority by the programmer
     *
     * The range of priority is 1 to 10
     *
     * 1 is the lowest priority
     * 10 is the highest priority
     *
     * Thread.MIN_PRIORITY = 1
     * Thread.NORM_PRIORITY = 5
     * Thread.MAX_PRIORITY = 10
     *
     * 1) If two threads having same priority, we can't expect exact execution order, this will
     * depend on thread scheduler
     *
     * 2) If the first thread has a higher priority than the second thread, then there is a high chance
     * that the first thread will execute first
     *
     * 3) The setter method to set priority, the argument range is 1 to 10, if the argument is larger than 10,
     * then it will throw a runtime exception: IllegalArgumentException
     *
     * 4) All the subsequent threads created by the main thread will have the same priority as the main. In other words,
     * all child threads will have the same priority as the parent thread, priority is inherited
     *
     * 5) A parent thread is define as the thread are created a child thread
     *
     */

    public static void main(String[] args) {

        MyThread_priority_1 t1 = new MyThread_priority_1();
        MyThread_priority_2 t2 = new MyThread_priority_2();

//        t1.start();
//        t2.start();

        /**
         * We cannot predict the output of the above statement as both thread priorities are the same (5)
         */

//        int six = 6;
//        t1.setPriority(six);
//
//        t1.start();
//        t2.start();

        /**
         * We still cannot predict the output of the abouve statement. But, we can say that t1 has a higher possibility to run first
         * since it has a higher priority than t2, it is still depend on the JVM on each thread it wants to execute
         */

        int ten = 10;
        t1.setPriority(ten);

        t1.start();
        t2.start();

        /**
         * If we set t1 priority is set to 10, then it will execute first and then t2.
         */

    }
}

class MyThread_priority_1 extends Thread {

    @Override
    public void run() {

        System.out.println("Hello from 1");

    }
}

class MyThread_priority_2 extends Thread {

    @Override
    public void run() {

        System.out.println("Hello from 2");

    }
}

